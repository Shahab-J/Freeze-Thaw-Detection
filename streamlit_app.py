import streamlit as st
import geemap
import ee
import folium
import numpy as np
import rasterio
from datetime import datetime
from PIL import Image

# Initialize Earth Engine
ee.Initialize()

# Function to check and install missing packages
def check_and_install(package):
    try:
        __import__(package)
    except ImportError:
        st.error(f"Package '{package}' is missing. Installing...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        st.success(f"Package '{package}' installed successfully.")

# List of required packages
required_packages = [
    "geemap",
    "earthengine-api",
    "Pillow",
    "rasterio",
    "streamlit",
    "numpy",
    "matplotlib",
    "folium",
    "setuptools"
]

# Check each package and install if missing
for package in required_packages:
    check_and_install(package)

# Define Streamlit app title and description
st.title("Freeze-Thaw Cycle Detection Tool")
st.write("""
    This tool allows you to visualize and analyze the freeze-thaw (FT) cycles in agricultural regions of Canada using Sentinel-1 SAR data.
    You can select regions of interest (ROI), specify date ranges, and clip the results to agricultural land for freeze-thaw classification and prediction.
""")

# Sidebar for user input
st.sidebar.header("User Input Parameters")

# -*- coding: utf-8 -*-
"""Chapter3_GEE_PythonAPI_23March2025_GitHub- Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y19IaZy-fJCSobhyB5XmP8V_m13uMKv5
"""

import ee
import geemap
import streamlit as st
from datetime import date
import urllib.request
import numpy as np
from PIL import Image
import json
import os
from google.oauth2 import service_account


# Step 1: Access the Service Account JSON from Streamlit secrets
try:
    # Load the service account JSON from Streamlit secrets
    service_account_json = st.secrets["GEE_SERVICE_ACCOUNT_JSON"]
    
    # Create credentials from the secrets (no file path used here)
    credentials = service_account.Credentials.from_service_account_info(
        service_account_json, 
        scopes=["https://www.googleapis.com/auth/earthengine.readonly"]
    )
    
    # Initialize Earth Engine
    ee.Initialize(credentials)
    st.write("✅ Earth Engine initialized successfully!")

except Exception as e:
    st.write(f"❌ Error during authentication: {e}")






# Step 2: Map & User Inputs
start_date = st.date_input("Start Date", date(2023, 10, 1), min_value=date(2015, 1, 1), max_value=date(2025, 12, 31))
end_date = st.date_input("End Date", date(2024, 6, 30), min_value=date(2015, 1, 1), max_value=date(2025, 12, 31))
resolution = st.selectbox("Resolution (m)", [10, 30, 100], index=1)



# Initialize the map using geemap
Map = geemap.Map()

# Add basemap and set the region of interest
Map.add_basemap('SATELLITE')
Map.centerObject(ee.Geometry.Point([-72.75, 46.29]), 12)

# Optional: Add other map controls or layers here
Map.add_draw_control()

# Display the map using Streamlit's HTML component
st.components.v1.html(Map.to_html(), height=500)






# Step 3: Process Sentinel-1 Data
def process_sentinel1(start_date, end_date, roi):
    """Process Sentinel-1 data."""
    if roi is None:
        st.write("❌ No ROI selected. Please draw an ROI before processing.")
        return None

    selected_resolution = resolution  # User-selected resolution

    # Process Sentinel-1 data (this should be implemented using your Sentinel-1 processing code)
    collection = (
        ee.ImageCollection('COPERNICUS/S1_GRD')
        .filterDate(start_date, end_date)
        .filterBounds(roi)
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
        .filter(ee.Filter.eq('instrumentMode', 'IW'))
    )

    if collection.size().getInfo() == 0:
        st.write("❌ No Sentinel-1 images found for the selected date range and ROI.")
        return None

    st.write(f"🔍 Found {collection.size().getInfo()} Sentinel-1 images in ROI.")
    # Process the images as per your logic (e.g., apply Refined Lee filtering, etc.)
    return collection

processed_images = process_sentinel1(str(start_date), str(end_date), Map.user_roi)

# Step 4: Show Classified Images
def show_classified_images(classified_images):
    """Display classified images in Streamlit."""
    image_list = classified_images.toList(classified_images.size())
    for i in range(classified_images.size().getInfo()):
        img = ee.Image(image_list.get(i))
        url = img.select('FT_State').getThumbURL({"min": 0, "max": 1, "dimensions": 512, "palette": ["blue", "red"]})
        image_array = np.array(PIL.Image.open(urllib.request.urlopen(url)))
        st.image(image_array, caption=f"Classified Image {i+1}", use_column_width=True)

# Call the function to display images
if processed_images:
    show_classified_images(processed_images)

# Step 5: Show Statistics
def summarize_statistics(classified_collection, user_roi):
    """Summary stats for freeze-thaw classification."""
    summary = []
    # Loop through images and extract statistics for frozen/thawed areas
    for i in range(classified_collection.size().getInfo()):
        img = ee.Image(classified_collection.toList(classified_collection.size()).get(i))
        stats = img.select("FT_State").reduceRegion(
            reducer=ee.Reducer.frequencyHistogram(),
            geometry=user_roi,
            scale=resolution,
            maxPixels=1e13
        ).getInfo()

        hist = stats.get("FT_State", {})
        thawed_count = int(hist.get("0", 0))
        frozen_count = int(hist.get("1", 0))
        total_count = thawed_count + frozen_count
        thawed_percent = (thawed_count / total_count * 100) if total_count > 0 else 0
        frozen_percent = (frozen_count / total_count * 100) if total_count > 0 else 0

        summary.append(f"Image {i+1}: Frozen={frozen_count} ({frozen_percent:.1f}%) | Thawed={thawed_count} ({thawed_percent:.1f}%)")

    st.write("\n".join(summary))

# Call the function to show stats
if processed_images:
    summarize_statistics(processed_images, Map.user_roi)
